---
title: "Professional Précis"
subtitle: "Author: (Keven M. Duverglas)"
---

# About the Author

Hello my name is Keven Michel Duverglas, and I am Sophmore at Allegheny. A fun fact about me is that I can speak three language.
I am looking forward to collaborating with everyone throughout the semester and get to know the dev-team well.


# Week 1

## SE1

#### Summary

There's an exploration of what exactly
"software engineering" means, and the reading distinguishes it not only
from fields like programming and computer science but also
shedding light on how it stands in relation to other disciplines
with "engineering" in their title. It also speaks on the matters regarding the 
growth of organizations and release new software. 

#### Reflection

I am firmly convinced that this book provides insights into crafting efficient code.
These insights offer practical advice on how to refine one's
coding practices for the long term. One of the standout aspects of the book is its emphasis
on reducing redundancy in code, which not only makes the code cleaner but also easier to maintain. 

#### Use-Case

This book provides the tools for us to run code, allowing Chasten to evaluate and utilize it within a test-case setting.

## FB1

#### Summary

The initial chapter introduces core concepts of software testing, addressing the necessity,
methods, and assessment of software testing. Using Python and interactive notebooks, readers
are familiarized with these principles. The chapter provides a basic my_sqrt() function, which
aims to compute the square root of a given number. A brief overview
of understanding Python's structure and syntax is provided, followed by a practical demonstration of
running the function. Readers can directly experiment with the
function and observe results, while also making edits to the provided content. And this can be done through a Jupyter 
Notebook.

#### Reflection

This chapter provided a comprehensive look into the world of software testing,
offering both theoretical knowledge and hands-on tools for practical implementation.
One of the intriguing parts for me was the example on testing the my_sqrt() function. Implementing a square root
function might appear elementary,
but the emphasis on the Newton–Raphson method highlighted the process behind it.

#### Use-Case

The first chapter of the Fuzzing book does a solid job of laying down the basics.
It sets the stage for the kind of deep thinking we'll need when we start building the
Chasten tool. By mixing theory with hands-on examples, readers get a good grasp of what's
ahead. This foundation is key, making sure everyone's on the same page as we dive into the
more complex parts of the book.
It's clear that this chapter is an essential starting point for everything that follows.


# Week 2

## SE2

#### Summary

The article contrasts programming with software engineering, emphasizing three primary distinctions:
time, scale, and trade-offs. Time emerges as a crucial factor, with software engineering often focusing
on projects with extended lifespans that shifts in technology or business trends.
Unlike standalone programming tasks, software engineering is inherently collaborative, 
challenges related to team dynamics, project
management, and organizational policies. As projects and teams expand, maintaining efficiency is vital.
Furthermore, the discipline of software engineering demands intricate decision-making. Engineers face
complex trade-offs, frequently operating within an environment of differing metrics.

#### Reflection

Reading this, I can resonate with the aspects of drawbacks and trade-offs in software engineering.
This is evident in class where many of my colleagues often have to decide which tasks are more crucial
to complete. Additionally, time significantly influences our work ethic and decision-making.
It's a constant balance of prioritizing immediate needs against long-term objectives.

#### Use-Case

During our software development, it's crucial to evaluate the trade-offs of our programming choices.
Understanding the advantages and disadvantages before deployment is vital to ensure we don't
introduce issues into our code, and also intergate time-keeping as a habit.

## FB2

#### Summary

To achieve nearly perfect code coverage, we utilize a technique known as fuzzing.
Fuzzing involves generating random characters to test various input scenarios.
This method helps generate potential outcomes for different functions,
like the provided example of the cgi_decode function.
Through this, we determine the necessary inputs
to achieve comprehensive code coverage in our tests.

#### Reflection

Implementing such testing mechanisms proves invaluable for identifying
maximum coverage using random fuzzing inputs. It's particularly effective
in discovering edge cases in extensive programs with myriad input possibilities.
However, it's a time-consuming approach. Hence,
it's crucial to employ this technique only for large-scale programs that can't be
manually vetted, ensuring optimal time management.

#### Use-Case

For our chasten tool, incorporating these tests is paramount,
especially as we plan to introduce numerous features throughout the term.
It's crucial to ensure thorough coverage before releasing the software.
If we decide to implement this testing methodology, we must
be prepared to allocate substantial classroom time and personnel to it.


# Week 3

## SE3

#### Summary

This chapter delves into the infrastructure of a software engineering team, emphasizing the pivotal role of
teamwork in achieving remarkable results and highlighting the significance of self-awareness within the team.
The chapter discusses the trade-offs of working alone in software
development, including prolonged struggles and delayed error detection.
It also introduces the concept of collaborative nirvana, focusing on three
pillars of social interaction: humility, respect, and trust.
The action items suggested include regular team meetings and check-ins,
peer mentoring and knowledge sharing, as well as the importance of acknowledging
each team member's strengths, celebrating success, and learning from failures.

#### Reflection

This chapter underscores the critical importance of collaboration and self-awareness
in software engineering teams. It serves as a reminder that working in isolation can
lead to challenges and hinder progress.
Embracing humility, respect, and trust as guiding principles for social interaction
can unlock the full potential of teamwork.

#### Use-Case

The insights and recommendations from this chapter can be applied
in various scenarios within a software engineering team. For instance,
teams can implement regular meetings and check-ins to foster communication
and collaboration. Peer mentoring and knowledge sharing can be encouraged to
facilitate skill development and information exchange. Additionally,
acknowledging the strengths of each team member,
celebrating achievements, and using failures as opportunities for
learning can help create a positive and productive team culture.

## FB3

#### Summary

Fuzzing is a dynamic testing technique employed to discover defects by generating
a wide array of random inputs and subjecting them relentlessly to a target application.
The primary aim is to stress-test the software and unearth unexpected vulnerabilities.
This chapter delves into the benefits of fuzzing,
the roles of the fuzzer and runner components, and the advantages of applying fuzz testing to external programs.

#### Reflection

The concept of fuzzing is a powerful tool in the software testing arsenal.
By inundating an application with diverse and often unpredictable inputs,
fuzzing can reveal vulnerabilities that traditional testing methods might overlook. Understanding the mechanics of fuzzing,
such as the fuzzer and runner components, allows testers to tailor their approach to the specific needs of the application.

#### Use-Case

Fuzzing is an invaluable technique for identifying vulnerabilities in
software. The benefits of fuzz testing include uncovering issues like
buffer overflows, crashes, and security vulnerabilities. To implement
fuzzing, the fuzzer component can be customized to generate various 
types of inputs, such as numbers or characters. The runner component plays
a critical role in executing the target application with the generated inputs
and monitoring its behavior.

# Week 4

## SE4

#### Summary

In software development, effective communication within your team is crucial.
Team members are more likely to have solutions to issues because they work on
the same project. However, various challenges can hinder this communication,
such as fear of making mistakes, withholding code sections, and dealing with broken code.
To address these challenges, the article proposes different communication solutions.
The best approach involves comprehensive documentation paired with knowledgeable 
individuals who can apply this information to specific problems. This ensures a
wealth of information is available, and team members can get personalized help.
Additionally, creating a comfortable environment where team members feel free
to ask questions is crucial. Assigning mentors to new team members facilitates
one-on-one interactions and promotes growth.

#### Reflection

This article holds significant importance for our work on the "Chasten" project.
Effective communication is vital, especially given our limited time together each
week. While we've managed reasonably well so far, there's room for improvement.
Often, we struggle to make information widely available, particularly concerning
individual pull requests and issues in the issue tracker. This can lead to various problems, such as
information loss when team members are absent or leave, and the need for others
to review the information, potentially resulting in redoing work. Another in need of improvement is organization
of all the information that we have gathered, then it can be available to others
that would like to add to what we have built.

#### Use-Case

In the Chasten project, we're taking practical steps to boost collaboration,
drawing insights from the article on effective software development team communication. 
We're focused on creating comprehensive project documentation, implementing a mentorship
program or more leaders for the project, encouraging open communication, refining issue tracking, and centralizing project
information. Our aim is to foster better knowledge sharing, reduce information gaps during
transitions, streamline issue resolution, enhance information access, and empower team members to guide one another.
Through these efforts, we seek to strengthen our teamwork and productivity in the Chasten project.


## FB4

#### Summary 

The section on mutation analysis explores the creation of programs to rigorously test test cases.
Ineffective testing can lead to seemingly complete test coverage while missing essential bug detection.
To overcome this, mutation analysis programs are introduced to temporarily inject errors into the code,
assessing the test cases' bug-finding capabilities. The article exemplifies this with a triangle
classification program, standardizing the function through parsing and mutation,
leading to the replacement of return statements with pass statements to provoke errors and gauge test case accuracy.

#### Reflection

This article underscores the importance of mutation analysis in the Chasten project,
where accommodating diverse user inputs, including complex XPATH expressions, is
paramount. Ensuring robust and comprehensive test coverage capable of identifying
a wide array of errors is critical. Furthermore, considering the integration of external functions that simplify
the intricacies of mutation analysis into the project's software development can
markedly improve the code's overall quality.

#### Use-Case

In the context of the Chasten project, implementing mutation analysis is pivotal for bolstering test coverage
and error detection across a spectrum of user inputs, including XPATH expressions.
Embracing the methodologies outlined in this article empowers the project to enhance
its testing procedures, thereby fortifying its ability to identify diverse types of
errors. Furthermore, the integration of external functions that streamline
the complexities of mutation analysis can expedite the software development process
 ultimately leading to higher-quality code.

# Week 5

## SE5

#### Summary

This chapter delves into Google's shortcomings in achieving an inclusive
standard and offers a roadmap for future rectification as a collective company
endeavor. Google's software engineer demographics don't mirror their user base,
leading to the infusion of biases into their projects, like facial recognition
software. To address this, the Value Versus Outcomes section presents key
considerations: evaluating the composition of the product development team in
relation to the end users, designing for the most challenged user to enhance accessibility,
scrutinizing data for success, and identifying and preventing future failure points. These
guidelines amalgamate into a call for software engineers to be part of the solution rather thanthe problem, ultimately
fostering equity in their endeavors. The chapter also provides reflections and suggestions for further action.

#### Reflection

This chapter underscores the importance of inclusive workplaces
for productivity and bias reduction, with software engineers as
key agents of change. It emphasizes the need to address bias, shift from
"building for" to "building with" everyone, and tackle systemic tech industry
issues through psychological safety, multicultural competence, and professional
growth. The chapter highlights the significance of engineers
comprehending their products' impact on diverse users,
emphasizing the value of inclusive work environments and ongoing
learning for personal and career development.

#### Use-Case


This chapter underscores the importance of inclusivity in product development,
emphasizing a user-centric approach and collaboration with diversity experts.
While it may not directly apply to our current project, it's vital for workforce
readiness. For Chasten's future users, particularly
Allegheny College students, we must prioritize code readability and
use our experience to improve accessibility for a wider audience.

## FB5

#### Summary

When fuzzing programs that accept more than just random inputs,
like website URLs, it's crucial to adapt our fuzzer to produce
realistic yet incorrect URLs for testing functions related to URLs.
Attempting to test such functions with entirely random inputs could
take years to stumble upon a correct HTTP URL. An effective strategy
involves taking valid inputs and strategically altering specific
characters to create URLs that are incorrect but closely resemble
the correct format. This approach allows us to generate a wide
array of input variations. When these diverse inputs are combined
with a runner function, they ensure comprehensive coverage of every
line within the function under test. Consolidating these techniques
into a mutation fuzzing function enables the integration of knowledge
and methods from mutation analysis, code coverage analysis, and fuzzing
into a unified and effective testing approach.

#### Reflection

This article explores the integration of previously acquired knowledge
into a single function known as mutation fuzzing. The importance of
incorporating these ideas into test cases is emphasized to ensure
comprehensive coverage of various XPATH expressions. Mutation fuzzing
allows for the rapid application of these techniques on a large scale,
enabling the implementation of tests that would be impractical to conduct 
manually.

#### Use-case

Mutation fuzzing serves as a valuable tool in software testing and security analysis,
particularly for applications relying on XPATH expressions. It automates the generation
of diverse inputs, enabling systematic evaluation and rapid identification of vulnerabilities,
ensuring software robustness. Its scalability and efficiency make it an indispensable
resource for uncovering edge cases and enhancing security.

# Week 6

## SE6

#### Summary

The section from "Software Engineering at Google" stresses the importance of leadership
within any team, especially in software development contexts. It acknowledges the phenomenon
where engineers, often reluctantly, assume managerial roles. The dual mastery of software
engineering skills and team management is crucial for success. A key focus is on the subtleties
of effective management, advocating against micromanagement. Instead, a successful manager
should aim to create a supportive work environment, providing flexibility and removing impediments
to streamline workflows. The importance of maintaining a professional yet approachable relationship
with team members is also emphasized, which helps in making tough decisions without compromising
team dynamics. The chapter crystallizes its guidance into three fundamental principles for leadership:
Humility, Trust, and Respect. These principles ensure a leader is supportive and reliable, allowing team
members to focus on their tasks without undue concern about managerial issues.

#### Reflection & Use-case

In our own setting, the traditional hierarchical structure of managers and subordinates is absent.
However, we often find ourselves in leadership roles within peer-driven projects, particularly when we
possess specialized knowledge. In these scenarios, it's important to apply the principles of respect and
humility. Our approach should be one of collaboration and learning, rather than asserting dominance or
power. This ensures a more harmonious and productive environment, where knowledge transfer is effective
and team dynamics are positive. By embracing these values, we can foster a healthy and efficient workspace,
even in the absence of formal leadership roles.

## FB6

#### Summary

This chapter focuses on the interplay between formal languages, universal grammars,
and their role in generating inputs, segueing into a detailed exploration of grammars.
It emphasizes the significance of grammars in not only constructing programming languages
but also in formulating structured inputs for testing. Defining a grammar allows for the
creation of a function that generates random, yet structurally sound inputs, facilitating
extensive code testing. Nevertheless, this method has its boundaries. To optimize its utility,
\mutating these inputs is suggested, providing a more thorough examination of the code's
constraints and capabilities.

#### Reflection

The application of grammars in this context was an unexpected revelation to me,
having not considered this possibility when I initially encountered the concept.
The deeper I delve into the Fuzzing Book, the more it resembles assembling pieces
of a puzzle, each piece contributing to the creation of a robust testing suite.

#### Use-case 

As we venture into our new project, it seems opportune to integrate some of these insights.
Implementing these grammatical structures to generate test inputs could enhance our testing
process, ensuring a more robust and comprehensive evaluation of our code. It's an intriguing
approach worth exploring to strengthen our project's overall quality and reliability.

# Week 7

## SE7

#### Summary

This chapter highlights
strategies like identifying limiting factors, making informed trade-offs, and iterating ideas
to strike a balance. A crucial goal is to develop a self-driving team, reducing the 'bus factor'
by creating subteams for diverse problem-solving. Additionally, the chapter advises on scaling
team sizes based on project demands, ensuring neither team members nor leaders are overwhelmed.

#### Reflection & Use-case

From this chapter, the standout insight is that effective management comprises observation
and listening, with just a little being critical adjustments. This principle discourages micromanagement
and promotes responsive leadership based on team feedback, fostering efficiency and autonomy.
However, its direct relevance to our Chasten project is limited, as we operate without a set leader,
assigning tasks within small groups for self-driven progress. While the chapter targets environments
with clear leadership hierarchies, its emphasis on minimal but meaningful interventions and team
autonomy can still offer useful insights for our collaborative efforts in developing the Chasten tool.

## FB7

#### Summary

The chapter addresses the inefficiencies of the simple_grammar_fuzzer in the Fuzzing Book, highlighting
its poor time complexity with large inputs and frequent inaccuracies in symbol or parenthesis counts.
To remedy this, the introduction of deviation trees is proposed. These trees track the pathways of grammar
expansions, enabling the monitoring of each grammar statement's cost. This methodology empowers us to preset
expansion limits and determine when to terminate the grammar, effectively controlling input size and reducing evaluation time.

#### Reflection & Action

Incorporating deviation trees revolutionizes grammar fuzzing by imposing input size constraints,
transforming it into a practical testing method. Without such limits, grammar fuzzing risks becoming
an endless process with increasingly large inputs, leading to significant time inefficiencies. This
innovation ensures that inputs remain manageable in length and can be processed within reasonable
timeframes, greatly enhancing the utility and applicability of this testing technique.

# Week 8

## SE8

#### Summary

In this section of Software Engineering at Google, the focus is on the strategic application of
rules to optimize code quality. Rules serve as essential guidelines, distinguishing what should
be promoted and what should be avoided. These guidelines also prompt companies to reflect on their
core values, enabling the incorporation of these principles into the guidance provided to their workforce.
A well-defined set of rules is imperative to prevent codebases from becoming chaotic and lacking a discernible pattern.
Standardizing the execution of projects and managing a company becomes achievable by creating a style guide. This ensures
alignment across the organization, fostering a unified approach to program implementation.

Ultimately, establishing robust rules that are easy to follow while maintaining a consistent set of policies
within the workplace is crucial. These rules form the foundation for the team's approach to future projects,
ensuring steady production over time.

#### Action & Reflection

This section resonates with our Chasten project, as our team frequently experiences challenges in achieving consensus.
Having a concise set of rules could greatly benefit us. For example, implementing rules related to the approval of pull
requests and workflow standards could lead to a more consistent and efficient team. Such changes would unify our team,
streamlining the collaborative process in team-based software engineering without the need for laborious efforts to seek
team members' assistance in specific aspects.

## FB8

#### Summary

In specific scenarios of fuzz testing, relying solely on a grammar fuzzer may not suffice due to the inherent need
for rules in input generation. To address this, employing a parser becomes essential to transform a string input
into a derivation tree. A Predicate Expression Grammar (PEG) parser serves this purpose, parsing until it identifies
a rule that aligns with its query. An example is provided below:

```python
class PEGParser(Parser):
    def parse_prefix(self, text):
        cursor, tree = self.unify_key(self.start_symbol(), text, 0)
        return cursor, [tree]
```

While PEGParser is effective for finding a single match, in many cases, it is desirable to identify all matches,
necessitating a Context-Free Grammar (CFG) parser. This type of parser allows for matching all parts of an input
during parsing, as illustrated by the following example:

```
class CFGParser(CGFParser):
    def parse(self, text):
        cursor, states = self.parse_prefix(text)
        start = next((s for s in states if s.finished()), None)

        if cursor < len(text) or not start:
            raise SyntaxError("at " + repr(text[cursor:]))

        forest = self.parse_forest(self.table, start)
        for tree in self.extract_trees(forest):
            yield self.prune_tree(tree)
```

#### Action & Reflection

These parsers represent a crucial advancement in creating derivation trees from specific seeded inputs.
This capability enables the identification of necessary grammars for simulating inputs in future fuzz testing,
automating the input-taking process for subsequent fuzzing. In the context of Chasten, integrating PEG and CFG
parsers enhances the tool's performance by facilitating the
importation and seamless implementation of these parsers. These parsers contribute to the creation of concise,
branched grammars, leading to faster grammar processing times. The incorporation of more complex parsers allows
for the composition of grammars with finer details, without compromising external structures or the program's
overall significance.

## SE9

#### Summary


This segment of Google's Software Engineering focuses on the pre-merger evaluation of code for the main product.
It encompasses insights into the advantages, recommendations, and overall procedures employed by Google to optimize
the efficiency and effectiveness of code reviews. Google employs a meticulous approach to guarantee correctness,
consistency, extensive knowledge sharing among developers, and comprehensive change tracking. While this process
incurs costs, it ensures that the codebase adheres to Google's high standards of consistency.

However, the journey of code review is not always seamless. Consequently, this section provides valuable
tips for conducting reviews effectively. Essential to this is maintaining a courteous and professional
communication style to facilitate timely and dispute-free code reviews. Code reviewers are advised to
communicate their review timelines promptly, ensuring that others are not left waiting. Professionalism
becomes crucial when disagreements arise between a developer and a reviewer regarding a specific section of
code; finding common ground on necessary changes is essential. Emphasizing the importance of modest changes
is another key point, preventing reviewers from feeling overwhelmed and facilitating swift reviews. Crafting
informative commit messages and change descriptions proves instrumental in aiding reviewers' understanding of
the nature of the changes. Additionally, prudent resource usage is stressed, advocating for a single reviewer
and the automation of tasks wherever possible.

#### Action & Reflection

This section highlights crucial insights into efficient code review practices. One notable aspect that caught
my attention pertains to the number of reviewers involved in the process. In our current project, we maintain
a minimum of 3 reviewers, and at times, this number escalates to 5 for a single change. This approach is
flagged as inefficient in the article, emphasizing that often, reviewers merely skim through the code to
verify functionality rather than conducting a thorough examination. Consequently, multiple individuals spend
time perfunctorily reviewing code that could be adequately handled by a single person. Addressing this
inefficiency involves considering a shift to single-person reviews, which not only streamlines the process
but also holds that individual accountable for timely and accurate reviews.

Another noteworthy point discusses the importance of precise change descriptions, an area where our
team appears to be lacking. Specifically, commit messages and timing are identified as potential weaknesses.
The suggestion is to increase the frequency of commits to showcase each incremental change to specific code
segments. This practice enables reviewers to track the evolution and improvement of the change step by step,
fostering a clearer understanding of the development process. Implementing these adjustments could contribute
to a more streamlined and accountable code review process within our team.

## FB9

#### Summary
When employing tests to intentionally induce code failures or crashes, it's crucial to grasp the underlying
reasons for the failure and understand the conditions that trigger it. Mere awareness of a broken state isn't
sufficient; one must delve into the hows and whys of the issue. While running tests, pinpointing the specific
segments of the code responsible for problems can be challenging. A fuzzer or mutator-based approach might
identify the existence of an issue but often falls short in providing insights into the reasons behind the problem.

To tackle this, manual exploration can be undertaken, where testing continues until the problem is uncovered.
Alternatively, a technique known as Delta Debugging can be applied. This method takes the inputs responsible
for breaking the test or build and employs a binary search algorithm-like approach. It systematically removes
parts of the input to determine if the issue persists or is resolved. Delta Debugging aids in identifying the
causes of a bug or defect, streamlining more efficient and targeted fixes if necessary.

An illustrative example of Delta Debugging is found in the [Fuzzingbook](https://www.fuzzingbook.org/):

```python
class DeltaDebuggingReducer(CachingReducer):
    """Reduce inputs using delta debugging."""

    def reduce(self, inp: str) -> str:
        """Reduce input `inp` using delta debugging. Return reduced input."""

        self.reset()
        assert self.test(inp) != Runner.PASS

        n = 2     # Initial granularity
        while len(inp) >= 2:
            start = 0.0
            subset_length = len(inp) / n
            some_complement_is_failing = False

            while start < len(inp):
                complement = inp[:int(start)] + \
                    inp[int(start + subset_length):]

                if self.test(complement) == Runner.FAIL:
                    inp = complement
                    n = max(n - 1, 2)
                    some_complement_is_failing = True
                    break

                start += subset_length

            if not some_complement_is_failing:
                if n == len(inp):
                    break
                n = min(n * 2, len(inp))

        return inp
```
This code takes an input, tests it, and iteratively reduces it until it is minimized to a single character.
This approach enhances the specificity and usefulness of debugging outputs, providing better insight into
the code's behavior during failures.


#### Action & Reflection

This concept seems somewhat beneficial, but considering the specific context in which we would apply it,
I find that implementing this idea might involve more effort than the relatively minimal gain it offers.
While it provides assistance, we're not dealing with highly intricate inputs, and the setup time for such a
concept may outweigh the benefits compared to manually resolving issues. Nevertheless, the core concept of
reduction itself holds significance in debugging. It serves as an effective approach to identify problems and
often contributes to a deeper understanding of the code. However, the automated implementation of this concept
appears overly complex and may not be worth the effort for projects of the scale we are currently working on.

# Week 9

## SE10

#### Summary

This section of Google's Software Engineering underscores the crucial role of documentation in enhancing
code usage and maintenance. Documentation goes beyond code operations, encompassing descriptive notes and
tutorials to improve overall readability. While its benefits may not be immediately apparent, neglecting
or delaying documentation can lead to confusion for future developers. Google emphasizes treating documentation
like code, with regular maintenance and adherence to a consistent style. Assigning owners to each documentation
section ensures ongoing clarity and long-term viability.

Understanding the target audience is vital in documentation creation, considering factors like the audience's
level of development experience and whether documentation is for internal developers or the general public.
The choice of documentation style is equally important, ranging from reference documentation and design documents
to in-depth tutorials and conceptual documentation. Ensuring documentation stays current with regular updates is
key to its continued effectiveness, aiding users in comprehending all aspects of the tool. In conclusion, while
creating documentation requires initial effort, its long-term benefits in facilitating code understanding and
usage make it a worthwhile endeavor.

#### Action & Reflection

Within our Cellveyor team, our documentation efforts have room for improvement. While we've been diligent in
commenting on the project's work and incorporating reference documentation within the code, we haven't established a
dedicated wiki for comprehensive documentation, including tutorials on how Cellveyor operates and reference
documentation detailing the various inputs for its commands. This aspect is certainly an area where enhancement is
possible, but I believe prioritizing it should come after addressing the remaining issues with the tool itself.

## DB1

#### Summary 

In the inaugural section of the Debugging Book, foundational principles of troubleshooting malfunctioning
functions are introduced. The discussion starts by highlighting counterproductive coding practices, such as
excessive print statements, arbitrary changes, and hardcoded inputs. Instead, the emphasis is on a meticulous
code review approach, seeking to identify root causes rather than opting for temporary fixes. Effectively
isolating specific issues from broader exceptions entails scrutinizing generalized errors within a function
and involves formulating, adjusting, and challenging hypotheses about the program's malfunction. Running tests
based on these hypotheses aids in identifying correlated issues that need resolution. Once these issues are
found, updating the failed test cases enhances coverage and prevents potential errors in future updates.
Maintaining a comprehensive log of these steps facilitates the recall of previously explored ideas and actions.

#### Action & Reflection

While I already incorporate many of these bug-fixing steps into my process, a significant insight from
this article was the emphasis on creating a hypothesis for the reasons behind certain function failures.
The suggestion of adopting a higher level of documentation and a structured process for each specific issue
appears highly beneficial, particularly when tackling complex problems. This approach not only aids in my
individual problem-solving but also enhances collaboration when others join in to address the issue. In essence,
incorporating a more detailed approach within our team's issue-resolution strategy promises to yield substantial
improvements.ured process for each specific issue appears highly
beneficial, particularly when tackling complex problems. This approach not only aids in my individual
problem-solving but also enhances collaboration when others join in to address the issue. In essence,
incorporating a more detailed approach within our team's issue-resolution strategy promises to yield substantial
improvements.

# Week 10

## SE11

#### Summary 

This section delves into testing practices at Google, highlighting the incorporation of automated programs
to examine their extensive codebase for errors. Automated tests play a crucial role in ensuring code correctness,
offering enhanced confidence and contributing to a smoother development process. When designing tests, Google
considers their size and scope. Tests can be small, covering one process, medium, encompassing a single machine,
or large, running on multiple machines or processes. Google advocates a majority of code coverage by narrower
scope tests for more targeted and effective testing, as larger tests are often weaker and time-consuming.

#### Action & Reflection

The testing concepts presented in this article are highly beneficial and can be effectively applied to our project, Cellveyor
. While we have implemented both large and small-scale tests, the crucial insight here is the emphasis on not just expanding
test coverage but also prioritizing the creation of high-quality tests capable of handling diverse inputs. A key approach to
achieving this is by concentrating on essential functions and incorporating fuzzing tests, which provide a variety of example
inputs to ensure robust testing.

## DB2

#### Summary 


This section of the Debugging Book delves into the use of tracers for examining variable states throughout different sections of
code. An illustrative example involves simple tracking of variables as the program progresses, enhancing debugging efforts by
revealing interactions between various variables. A more detailed version demonstrates tracing at specific points in the code,
offering insights into variable changes:

```python 
return 255 remove_html_markup {'s': 'abc', 'tag': False, 'quote': False, 'out': 'abc', 'c': 'c'}
```

This meticulous tracking approach reports each instance of variable changes, providing a comprehensive understanding of program
behavior. While effective, this method can be time-consuming. To mitigate this, static code injection is introduced, injecting code
selectively to trace only the necessary parts of the function, significantly reducing program runtime while maintaining detailed
insights into variable changes:

```python
243     for c in s:
                                         # c = '/'
244         assert tag or not quote
246         if c == '<' and not quote:
    ...
255     return out
remove_html_markup() returns 'x'
```

#### Action & Reflection

Tracing a program proves to be an effective method for monitoring the outputs of individual functions, facilitating the debugging
process by providing insights into how variables interact. However, consistently running a tracer for every output can be inefficient
due to the time required to track all variables. Implementing tracers selectively into our project, particularly when errors occur,
would be highly beneficial in optimizing the debugging process.

# Week 11

## SE12

#### Summary

This chapter delves into the concept of unit tests and strategies for their long-term maintenance. Poorly designed tests can pose
challenges for engineers when addressing issues arising from brittle tests. To mitigate this, the chapter suggests establishing
a test base that remains unchanged, ensuring that test cases consistently validate a function's input and output without altering
the method of achieving this. Preventing functions from being refactored in ways that alter their overall functionality maintains
the functional integrity of tests. Testing the public version of the program, rather than the private version, is recommended to
ensure the correct results are delivered to users.

Effective testing also involves running state tests that assess the overall system state after program execution. For instance,
a test adding a user to a database should verify a change in the database to confirm the function's success. Writing clear tests
with detailed notes and a distinct purpose enhances their strength and aids engineers in quickly identifying issues. Lastly,
the chapter emphasizes the importance of adhering to the DRY principle (Don't Repeat Yourself) by avoiding test or function repetition.
Instead, tests should be DAMP (Descriptive and Meaningful Phrases), prioritizing larger, more comprehensive tests over multiple similar
tests with slight deviations to optimize the test suite.

#### Action & Reflection

All these insights prove invaluable when contemplating the creation of test cases within a large program. The concept that resonated with
me the most is the emphasis on DRY, advocating against repetition in testing. It is crucial to strive for in-depth tests while maintaining a
focus on a specific area of code. I am confident that we can enhance our implementation of these ideas in Cellveyor, ensuring that our test
cases are not only concise but also free from unnecessary repetition.

## DB3

#### Summary

This chapter explores the concept of unit tests and their long-term maintenance strategies.
A poorly designed test can create challenges for engineers, and the chapter suggests establishing
an unchanging test base to ensure consistent validation of a function's input and output. The focus
is on preventing functions from being refactored in ways that alter their overall functionality,
maintaining the functional integrity of tests. Testing the public version of the program, as
opposed to the private version, is recommended to ensure the correct results are delivered to users.
Effective testing includes running state tests that assess the overall system state after program
execution. Clear tests with detailed notes and a distinct purpose are encouraged to enhance their
strength and aid engineers in quickly identifying issues. Lastly, adherence to the DRY principle
(Don't Repeat Yourself) and the importance of avoiding test or function repetition is emphasized.
Tests should be DAMP (Descriptive and Meaningful Phrases), prioritizing larger, more comprehensive
tests over multiple similar tests with slight deviations to optimize the test suite.

#### Action & Reflection

All these insights are valuable when considering the creation of test cases within a large program.
The emphasis on DRY, advocating against repetition in testing, resonates as a crucial concept. Striving
for in-depth tests while maintaining a focus on a specific area of code is essential. I am confident that
we can enhance our implementation of these ideas in Chasten, ensuring that our test cases are not only concise
but also free from unnecessary repetition.


# Week 12

## DB4

## Summary

The introduction to the section on statistical debugging explores the process of debugging a program that intermittently
passes and fails. The recommended approach involves identifying the lines of code that execute during failures but not
during passes, thereby efficiently pinpointing potential bugs and streamlining the debugging process. Utilizing a collector
function helps track all lines executed when a function runs with specific inputs, enabling the identification of
differences in executed lines between passing and failing inputs.

The method involves ranking lines by suspiciousness, evaluating how frequently certain lines run in a substantial
set of failing inputs versus passing inputs. With tools like discrete or continuous spectra, developers can highlight
the line of code most likely to contain a bug. Statistical debugging techniques extend beyond code coverage, utilizing
variables and their changes to analyze failing runs and employing training algorithms to assign values to lines and identify error-prone lines.

## Action & Reflection

These methods prove highly effective in identifying failure points in programs and can significantly save debugging time.
While the integration of test cases employing these methods into the codebase is uncertain, their potential usefulness in
pinpointing error-prone sections, especially in a codebase the size of Cellveyor's, is evident.

